# -*- coding: utf-8 -*-
"""
/***************************************************************************
 gto_plugin
                                 A QGIS plugin
 Task organizer
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-05-25
        git sha              : $Format:%H$
        copyright            : (C) 2018 by ms.GIS Ltd
        email                : contact@msgis.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import Qt, QObject, QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction,QDockWidget,QToolBar

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .gtoTree_dockwidget import GTODockWidget
import os.path
from .gto_main import gtoMain
from .gto_metadata import gtoMetadata
from .gto_info import gtoInfo
import sys
from qgis.core import QgsProject,QgsMapLayer
from .gto_helper import findToolbar,timestamp

class gtoPlugin(QObject):
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        super(gtoPlugin, self).__init__()#return a proxy object that delegates method calls to a parent or sibling class of type.
        # This is useful for accessing inherited methods that have been overridden in a class. #
        # The search order is same as that used by getattr() except that the type itself is skipped.
        self.setObjectName(__name__)
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        self.metadata = gtoMetadata(self.plugin_dir)
        self.info = gtoInfo(self)

        self.debug = self.metadata.debug# os.path.exists(os.path.join(self.plugin_dir, "debug.gto"))
        self.info.log("GTO started (UTC): ",())
        self.info.log("__init__", 'debug:', self.debug)

        sys.path.append(self.plugin_dir)  # for import of mActionGTO*.py
        if self.debug: self.info.log(os.path.normpath(self.plugin_dir))

        # DockWidget
        self.dockwidget = self.iface.mainWindow().findChild(QDockWidget, 'GTODockWidgetBase')
        if self.dockwidget is None:
            self.dockwidget = GTODockWidget()
            #if self.debug: self.info.log("New dockwidget: ", self.dockwidget.objectName())
            self.dockwidget.setAllowedAreas(Qt.LeftDockWidgetArea | Qt.RightDockWidgetArea)
        self.iface.addDockWidget(Qt.LeftDockWidgetArea, self.dockwidget)

        # print "** INITIALIZING GTO"
        self.loaded = False
        self.gtotb = self.createToolBar()

        self.gtomain = None
        self.gtomain = gtoMain(self)
        self.iface.initializationCompleted.connect(self.project_initializationCompleted)
        #project events
        self.prj = QgsProject.instance()
        self.prj.readProject.connect(self.project_read)
        self.prj.projectSaved.connect(self.project_saved)
        self.prj.homePathChanged.connect( self.project_homePathChanged)
        self.prj.fileNameChanged.connect(self.project_fileNameChanged)
        self.prj.loadingLayer.connect(self.project_loadingLayer)
        self.prj.layerLoaded.connect(self.project_layerLoaded)
        self.prj.layerWasAdded.connect(self.project_layerWasAdded)
        #self.prj.oldProjectVersionWarning.connect()
        #self.prj.snapSettingsChanged.connect()
        #iface events
        self.iface.mapCanvas().layersChanged.connect(self.project_layerchanged)

    def createToolBar(self):
        try:
            toolbar = None
            # load gto toolbar
            objName = 'mGTOtoolbar'
            toolbar = findToolbar(self.iface, objName)
            if toolbar is None:
                if self.debug: self.info.log("load gtotb")
                toolbar = QToolBar()
                toolbar.setObjectName(objName)
                toolbar.setWindowTitle(u'GTO Toolbar')
                toolbar.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)  # ToolButtonFollowStyle)# ToolButtonTextUnderIcon)
                self.iface.addToolBar(toolbar, Qt.BottomToolBarArea)
            else:
                if self.debug: self.info.log("clear gtotb")
                toolbar.clear()
        except Exception as e:
            self.info.gtoWarning(e.args)
        finally:
            return toolbar


    def project_layerchanged(self):
        if self.debug: self.info.log('project_layerchanged')
        pass

    def project_loadingLayer(self):
        if self.debug: self.info.log('project_loadingLayer')
        pass

    def project_layerLoaded(self,i,n):
        if self.debug: self.info.log('project_layerLoaded',i,n)

        pass

    def project_layerWasAdded(self,maplayer):
        if self.debug: self.info.log('project_layerWasAdded:', maplayer.name())
        pass

    def project_fileNameChanged(self):
        if self.debug: self.info.log('project_fileNameChanged')
        pass

    def project_homePathChanged(self):
        if self.debug: self.info.log('project_homePathChanged')
        pass

    def project_saved(self):
        if self.debug: self.info.log('project_saved')
        pass

    def project_closed(self):
        # if self.debug: self.info.log('project_closed')
        pass

    def project_read(self):
        if self.debug: self.info.log('project_read')
        if self.gtomain is not None:
            self.gtomain.tree.clear()
        if self.gtotb is not None:
            self.gtotb.clear()

        if self.loaded:
            if self.debug: self.info.log("project_read:", "loaded")
            self.run()

    def project_initializationCompleted(self):
        if self.debug: self.info.log('project_initializationCompleted')
        # if QGIS opened (with or without qgs)
        self.loaded = True
        self.run()

    def run(self):
        if self.debug: self.info.log("run")
        """Run method that loads and starts the plugin"""
        if self.gtomain is not None:
            self.gtomain.loadgto()
        self.loaded = True

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        if self.debug: self.info.log("initGUI")
        self.action = QAction(QIcon(self.plugin_dir + "/tree.png"), 'GeoTaskOrganizer', self.iface.mainWindow())
        self.action.triggered.connect(self.run)
        self.iface.addPluginToMenu('ms.gis GTO', self.action)
        self.setPluginIcon()

    def setPluginIcon(self):
        menubar = self.iface.mainWindow().menuBar()
        for action in menubar.actions():
            if action.menu():
                for a in action.menu().actions():
                    if a.text() == 'ms.gis GTO':
                        a.setIcon(QIcon(self.plugin_dir + "/icon.png"))
                        break


    # --------------------------------------------------------------------------

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        if self.debug: self.info.log("unload\n\n")

        self.iface.removePluginMenu('ms.gis GTO', self.action)
        if not self.gtomain is None:  # should never happen
            self.gtomain.tree = None
            self.gtomain.imglabel = None
            self.gtomain.dockwidget = None
            self.gtomain.gtoplugin = None
        self.gtomain = None

        if self.dockwidget is not None:
            if not self.debug: self.dockwidget.setHidden(True)
        self.dockwidget = None
        if self.gtotb is not None:
            self.gtotb.clear()  # removes all actions and causes ('wrapped C/C++ object of type QTreeWidgetItem has been deleted',) with some actions like open...
            if not self.debug: self.gtotb.setHidden(True)
        self.gtotb = None
        # del self.gtomain
    # --------------------------------------------------------------------------
